#!/usr/bin/python3

import sys
import os
import argparse
from threading import Thread, Event
from tlsfuzzer.utils.log import Log
from tlsfuzzer.utils.progress_report import progress_report


def create_output_directory(out_dir):
    """创建输出目录，如果目录已经存在则忽略"""
    try:
        os.mkdir(out_dir)
    except FileExistsError:
        pass


def generate_timing_probes(out_dir, characters, repeat, verbose=False):
    """生成定时探测并写入日志"""
    # 初始化探测器字典和探测名称列表
    probes = {name: name for name in characters}
    probe_names = list(probes.keys())
    
    # 创建日志对象
    log = Log(os.path.join(out_dir, "log.csv"))
    log.start_log(probes.keys())

    # 打乱日志顺序并重复写入
    for _ in range(repeat):
        log.shuffle_new_run()
    
    log.write()

    # 重置日志位置
    log.read_log()

    # 启动进度报告线程
    status = [0, len(probe_names) * repeat, Event()]
    if verbose:
        kwargs = {
            'unit': ' ciphertext',
            'delay': 2
        }
        progress = Thread(target=progress_report, args=(status,), kwargs=kwargs)
        progress.start()

    # 等待进度报告线程结束
    if verbose:
        status[2].set()
        progress.join()

    print("done")


def parse_arguments():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(prog='gen_timing_probes', description='Generate timing probes for analysis')
    parser.add_argument('-c', action='append', help='Characters for generating probes')
    parser.add_argument('-o', required=True, help='Output directory')
    parser.add_argument('-r', required=True, help='Number of repetitions')

    return parser.parse_args()


def main():
    """主函数，协调整个程序的执行"""
    # 解析命令行参数
    args = parse_arguments()

    # 检查Python版本
    if sys.version_info < (3, 7):
        print("This script is compatible with Python 3.7 and later only")
        sys.exit(1)

    # 获取命令行参数
    out_dir = args.o
    characters = args.c
    repeat = int(args.r, 10)
    verbose = False  # 可以根据需要设置为True

    # 创建输出目录
    create_output_directory(out_dir)

    # 生成定时探测
    generate_timing_probes(out_dir, characters, repeat, verbose)


if __name__ == '__main__':
    main()
